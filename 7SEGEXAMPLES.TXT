7SEG EXAMPLE1 
#include "msp430.h"                     ; #define controlled include file
; This example illustrates simple use of the 7-segment display

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module                                        
#define DIS2 0x20
#define DIS3 0x10
#define DIS4 0x08
#define DIS5 0x04

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #0xFF, &P2DIR           ; Configure the entirety of P2 as output
        
        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2

        ; Configure P1.2,3,4, and 5 as outputs
        MOV.B   #00111100b, &P1DIR

        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
        
main:   NOP                             ; main program

        ; Make sure all displays are off
        BIC.B   #0x3C, &P1OUT

        ; Enable DIS5
        BIS.B   #DIS5, &P1OUT
        
        ; Set the value of R4 equal to 0x00
        MOV.B   #0x00, R4

countLoop:
        MOV.B   ZERO(R4), &P2OUT
        INC.B   R4
        AND.B   #0x0F, R4
        CALL    #DelayMS
        JMP     countLoop                           

DelayMS:
        PUSH    R4
        MOV.W   #0xFFFF, R4
loop:
        DEC     R4
        JNZ     loop
        POP     R4
        RET

; Lookup table        
ZERO:   DC8    0x3F
ONE:    DC8    0x06
TWO:    DC8    0x5B
THREE:  DC8    0x4F
FOUR:   DC8    0x66
FIVE:   DC8    0x6D
SIX:    DC8    0x7D
SEVEN:  DC8    0x07
EIGHT:  DC8    0x7F
NINE:   DC8    0x67
LA:     DC8    0x77
LB:     DC8    0x7C
LC:     DC8    0x39
LD:     DC8    0x5E
LE:     DC8    0x79
LF:     DC8    0x71
COLON:  DC8    0x80

        END
7SEG EXAMPLE 2
#include "msp430.h"                     ; #define controlled include file
; This example illustrates simple use of the 7-segment display.
; When P1.6 transitions to low, a counter is incremented and displayed on
; a 7-segment display.

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module                                        
#define DIS2 0x20
#define DIS3 0x10
#define DIS4 0x08
#define DIS5 0x04

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #0xFF, &P2DIR           ; Configure the entirety of P2 as output
        
        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2

        ; Configure P1.2,3,4, and 5 as outputs
        MOV.B   #00111100b, &P1DIR

        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
        
main:   NOP                             ; main program

        ; Make sure all displays are off
        BIC.B   #0x3C, &P1OUT

        ; Make Sure P2OUT is initialized with the value thet would display 
        ; the number zero.
        MOV.B   &ZERO, &P2OUT

        ; Enable DIS5
        BIS.B   #DIS5, &P1OUT
        
        ; Set the value of R4 equal to 0x00
        MOV.B   #0x00, R4
        
        ; Poll the input pin infinitely to detect if the switch was pressed.
inputLoop:
        BIT.B   #0x40, &P1IN            ; Test P1.6 and set status flags
                                        ; accordingly.
        JNZ     inputLoop                 ; If the switch is not pressed jump
                                        ; back to poll again.
        
        INC.B   R4                      ; Increment the R4 everytime
                                        ; the switch is pressed.
        AND.B   #0x0F, R4               ; Make sure the value in R4 never
                                        ; exceeds 0x0F.
                                        
        MOV.B   ZERO(R4), P2OUT         ; Change the number on the seven segment
                                        ; display.
                                        
lockLoop:
        BIT.B   #0x40, &P1IN
        JZ      lockLoop
        ; Delay to wait out switch bounce
        CALL    #DelayMS
        ; Is the switch still NOT pressed?
        BIT.B   #0x40, &P1IN
        JZ      lockLoop

        JMP     inputLoop                           

DelayMS:
        PUSH    R4
        MOV.W   #0xFFFF, R4
loop:
        DEC     R4
        JNZ     loop
        POP     R4
        RET

; Lookup table        
ZERO:   DC8    0x3F
ONE:    DC8    0x06
TWO:    DC8    0x5B
THREE:  DC8    0x4F
FOUR:   DC8    0x66
FIVE:   DC8    0x6D
SIX:    DC8    0x7D
SEVEN:  DC8    0x07
EIGHT:  DC8    0x7F
NINE:   DC8    0x67
LA:     DC8    0x77
LB:     DC8    0x7C
LC:     DC8    0x39
LD:     DC8    0x5E
LE:     DC8    0x79
LF:     DC8    0x71
COLON:  DC8    0x80

        END
7SEG EXAMPLE 3
#include "msp430.h"                     ; #define controlled include file
; This example illustrates simple use of the 7-segment display.
; When P1.6 transitions to low, a counter is incremented and displayed on
; a 7-segment display. The switch uses port interrupts. No debouncing.

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module                                        
#define btnFlag        0x200

#define DIS2 0x20
#define DIS3 0x10
#define DIS4 0x08
#define DIS5 0x04

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        ORG     0FFE4h                  ; Set the address of the P1 ISR in the 
                                        ; interrupt vector table.
        DC16    P1ISR                   ; Address is 16-bit.

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #0xFF, &P2DIR           ; Configure the entirety of P2 as output
        
        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2

        ; Configure P1.2,3,4, and 5 as outputs
        MOV.B   #00111100b, &P1DIR

        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
  
        ; Clear the interrupt flag before enabling interrupts.
        BIC.B   #0x40, &P1IFG
        
        ; Enable interrupts on P1.6 whenever falling edge occurs.
        BIS.B   #0x40, &P1IE
        BIS.B   #0x40, &P1IES
        
        ; Reset the button flag
        MOV.B   #0x00, &btnFlag
        
        ; General interrupt enabled.
        EINT
        
main:   NOP                             ; main program

        ; Make sure all displays are off
        BIC.B   #0x3C, &P1OUT

        ; Make Sure P2OUT is initialized with the value thet would display 
        ; the number zero.
        MOV.B   &ZERO, &P2OUT

        ; Enable DIS5
        BIS.B   #DIS5, &P1OUT
        
        ; Set the value of R4 equal to 0x00
        MOV.B   #0x00, R4
        
lockLoop:
        TST.B   &btnFlag
        JZ      lockLoop
        MOV.B   #0x00, &btnFlag         ; Reset the btnFlag

        INC.B   R4                      ; Increment the R4 everytime
                                        ; the switch is pressed.
        AND.B   #0x0F, R4               ; Make sure the value in R4 never
                                        ; exceeds 0x0F.
                                        
        MOV.B   ZERO(R4), P2OUT         ; Change the number on the seven segment
                                        ; display.
                                     
        JMP     lockLoop                           

DelayMS:
        PUSH    R4
        MOV.W   #0xFFFF, R4
loop:
        DEC     R4
        JNZ     loop
        POP     R4
        RET

; Lookup table        
ZERO:   DC8    0x3F
ONE:    DC8    0x06
TWO:    DC8    0x5B
THREE:  DC8    0x4F
FOUR:   DC8    0x66
FIVE:   DC8    0x6D
SIX:    DC8    0x7D
SEVEN:  DC8    0x07
EIGHT:  DC8    0x7F
NINE:   DC8    0x67
LA:     DC8    0x77
LB:     DC8    0x7C
LC:     DC8    0x39
LD:     DC8    0x5E
LE:     DC8    0x79
LF:     DC8    0x71
COLON:  DC8    0x80

PAD:    DC8    0x00

P1ISR:
        ; Set the button flag signaling the main loop that the button has
        ; been pressed.
        MOV.B   #0x01, &btnFlag
        
        ; Clear the interrupt flag before returning from interrupt.
        BIC.B   #0x40, &P1IFG 
        RETI

        END
7SEG EXAMPLE 4
#include "msp430.h"                     ; #define controlled include file
; This example illustrates the use of the 7-segment display with multiple
; digits. 

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module          

; Define labels to the memory locations that hold the values to display.
#define THOU            0x200
#define HUND            0x201
#define TENS            0x202
#define ONES            0x203

#define DIS2            0x20
#define DIS3            0x10
#define DIS4            0x08
#define DIS5            0x04
#define ALLD            0x3C

#define SEG_DELAY       0xF3F0

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #0xFF, &P2DIR           ; Configure the entirety of P2 as output
        
        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2

        ; Configure P1.2,3,4, and 5 as outputs
        MOV.B   #00111100b, &P1DIR

        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
        
main:   NOP                             ; main program

        ; Make sure all displays are off
        BIC.B   #ALLD, &P1OUT
        
        ; Initialize our idexes to 0x00
        MOV.B   #0x00, &ONES
        MOV.B   #0x00, &TENS
        MOV.B   #0x00, &HUND
        MOV.B   #0x00, &THOU

Draw:
        ; Ones place.     
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS5, &P1OUT           ; Turn on DIS5
        MOV.B   &ONES, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS                                
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS4, &P1OUT           ; Turn on DIS4
        MOV.B   &TENS, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS3, &P1OUT           ; Turn on DIS3
        MOV.B   &HUND, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS2, &P1OUT           ; Turn on DIS3
        MOV.B   &THOU, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table        
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4.
        CALL    #DelayMS
        
        JMP     Draw                           

DelayMS:
        DEC     R4
        JNZ     DelayMS
        RET

; Lookup table        
ZERO:   DC8    0x3F
ONE:    DC8    0x06
TWO:    DC8    0x5B
THREE:  DC8    0x4F
FOUR:   DC8    0x66
FIVE:   DC8    0x6D
SIX:    DC8    0x7D
SEVEN:  DC8    0x07
EIGHT:  DC8    0x7F
NINE:   DC8    0x67
LA:     DC8    0x77
LB:     DC8    0x7C
LC:     DC8    0x39
LD:     DC8    0x5E
LE:     DC8    0x79
LF:     DC8    0x71
COLON:  DC8    0x80

        END
7SEG EXAMPLE 5
#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
; Control how fast to count.
#define COUNT_DELAY     0x0005

; Define labels to the memory locations that hold the values to display.
#define THOU            0x200
#define HUND            0x201
#define TENS            0x202
#define ONES            0x203

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        ; Initialize the counter delay value.
        MOV.W   #COUNT_DELAY, R5

        ; Initialize our idexes to 0x00
        MOV.B   #0x00, &ONES
        MOV.B   #0x00, &TENS
        MOV.B   #0x00, &HUND
        MOV.B   #0x00, &THOU
        
main:   NOP                             ; main program  
        
        DEC.W   R5
        JNZ     Cont
        ; Execute all the magic code to perform the multiple digit count.
        CALL    #doCount
        MOV.W   #COUNT_DELAY, R5        ; Reset the count back to the original value.
                
Cont:  JMP main                           ; jump to current location '$'
                                        ; (endless loop)

doCount:
        INC.B   &ONES                   ; Increment the ones place.
        BIT.B   #0x10, &ONES            ; Test to see if the LS nibble overflowed.
        JZ      NI                      ; jump to the end if the nibble did not overflow.
        AND.B   #0x0F, &ONES            ; If it did overflow mask the excess and continue 					to the nect line.
        
        INC.B   &TENS
        BIT.B   #0x10, &TENS
        JZ      NI
        AND.B   #0x0F, &TENS
        
        INC.B   &HUND
        BIT.B   #0x10, &HUND
        JZ      NI
        AND.B   #0x0F, &HUND
        
        INC.B   &THOU                   ; Increment the thousands place.
        AND.B   #0x0F, &THOU            ; Mask off everything above the LS nibble.
NI:     RET

        END

7SEG EXAMPLE 6
#include "msp430.h"                     ; #define controlled include file
; This example illustrates the use of the 7-segment display with multiple
; digits. This program counts up in hexadecimal.

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module          

; Somewhat control how fast to count.
#define COUNT_DELAY     0x0001

; Define labels to the memory locations that hold the values to display.
#define THOU            0x200
#define HUND            0x201
#define TENS            0x202
#define ONES            0x203

#define DIS2            0x20
#define DIS3            0x10
#define DIS4            0x08
#define DIS5            0x04
#define ALLD            0x3C

#define SEG_DELAY       0x03F0

        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        MOV.B   #0xFF, &P2DIR           ; Configure the entirety of P2 as output
        
        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P2SEL
        MOV.B   #0x00, &P2SEL2

        ; Configure P1.2,3,4, and 5 as outputs
        MOV.B   #00111100b, &P1DIR

        ; Make sure the pins are set to GPIO mode.
        MOV.B   #0x00, &P1SEL
        MOV.B   #0x00, &P1SEL2
        
main:   NOP                             ; main program

        ; Make sure all displays are off
        BIC.B   #ALLD, &P1OUT
        
        ; Initialize our idexes to 0x00
        MOV.B   #0x00, &ONES
        MOV.B   #0x00, &TENS
        MOV.B   #0x00, &HUND
        MOV.B   #0x00, &THOU

        ; Initialize the counter delay value.
        MOV.W   #COUNT_DELAY, R5

displayLoop:
        DEC.W   R5
        JNZ     Draw
        ; Execute all the magic code to perform the multiple digit count.
        CALL    #doCount
        MOV.W   #COUNT_DELAY, R5        ; Reset the count back to the original value.

Draw:
        ; Ones place.     
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS5, &P1OUT           ; Turn on DIS5
        MOV.B   &ONES, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS                                
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS4, &P1OUT           ; Turn on DIS4
        MOV.B   &TENS, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS3, &P1OUT           ; Turn on DIS3
        MOV.B   &HUND, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4
        CALL    #DelayMS
        
        BIC.B   #ALLD, &P1OUT           ; Turn off all displays
        BIS.B   #DIS2, &P1OUT           ; Turn on DIS3
        MOV.B   &THOU, R4               ; Move the number to display to R4
        MOV.B   ZERO(R4), &P2OUT        ; Get the pattern from the lookup table        
        MOV.W   #SEG_DELAY, R4          ; Pass the delay amount to DelayMS
                                        ; though R4.
        CALL    #DelayMS
        
        JMP     displayLoop                           

doCount:
        INC.B   &ONES                   ; Increment the ones place.
        BIT.B   #0x10, &ONES            ; Test to see if the LS nibble overflowed.
        JZ      NI                      ; jump to the end if the nibble did not overflow.
        AND.B   #0x0F, &ONES            ; If it did overflow mask the excess and continue to the nect line.
        
        INC.B   &TENS
        BIT.B   #0x10, &TENS
        JZ      NI
        AND.B   #0x0F, &TENS
        
        INC.B   &HUND
        BIT.B   #0x10, &HUND
        JZ      NI
        AND.B   #0x0F, &HUND
        
        INC.B   &THOU                   ; Increment the thousands place.
        AND.B   #0x0F, &THOU            ; Mask off everything above the LS nibble.
NI:     RET

DelayMS:
        DEC     R4
        JNZ     DelayMS
        RET

; Lookup table        
ZERO:   DC8    0x3F
ONE:    DC8    0x06
TWO:    DC8    0x5B
THREE:  DC8    0x4F
FOUR:   DC8    0x66
FIVE:   DC8    0x6D
SIX:    DC8    0x7D
SEVEN:  DC8    0x07
EIGHT:  DC8    0x7F
NINE:   DC8    0x67
LA:     DC8    0x77
LB:     DC8    0x7C
LC:     DC8    0x39
LD:     DC8    0x5E
LE:     DC8    0x79
LF:     DC8    0x71
COLON:  DC8    0x80

        END
